plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.springdoc.openapi-gradle-plugin" version "1.8.0"
    id 'groovy'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.8'
}

group = 'com.dxjunkyard'
version = '0.0.4-beta'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
        'org.springframework.boot:spring-boot-starter-validation',
        'org.springframework.boot:spring-boot-starter-webflux',
        'org.springdoc:springdoc-openapi-starter-webflux-ui:2.3.0',
        'org.springframework.boot:spring-boot-starter-actuator',
        'org.apache.commons:commons-collections4:4.4',
        'com.atilika.kuromoji:kuromoji-ipadic:0.9.0',
        'com.ibm.icu:icu4j:75.1',
    )
    compileOnly(
        'org.projectlombok:lombok',
    )
    developmentOnly(
        'org.springframework.boot:spring-boot-devtools',
    )
    annotationProcessor(
        'org.springframework.boot:spring-boot-configuration-processor',
        'org.projectlombok:lombok',
    )
    testImplementation(
        'org.springframework.boot:spring-boot-starter-test',
        'io.projectreactor:reactor-test',
        // spock
        'org.spockframework:spock-core:2.3-groovy-4.0',
        // spock for spring boot
        'org.spockframework:spock-spring:2.3-groovy-4.0',
    )

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0'
}

test {
    useJUnitPlatform()
    testLogging {
        // テスト時の標準出力と標準エラー出力を表示する
        showStandardStreams true
        // イベントを出力する (TestLogEvent)
        events 'started', 'skipped', 'passed', 'failed'
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks {
    bootJar {
        archiveFileName.set(rootProject.name + '.jar')
    }
    spotbugsTest {
        onlyIf { false }
    }
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
    excludeFilter = file('./config/spotbugs_filter.xml')
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: [
                    '**/*Application.class',
                    '**/*Exception.class',
                    '**/config/**',
                ]
            )
        }))
    }
}
